import tkinter as tk
from tkinter import ttk

def generate_rail(plaintext, num_rails):
    plaintext = plaintext.replace(' ', '').upper()
    length = len(plaintext)

    grid = [[' ' for x in range(length)] for y in range(num_rails)]

    rail = 0
    direction = 1

    for i, char in enumerate(plaintext):
        grid[rail][i] = char
        rail += direction
        if (rail == 0 )or (rail == num_rails -1):
            direction *= -1

    return grid


def rail_encrypt(plaintext, num_rails):
    grid = generate_rail(plaintext, num_rails)
    plaintext = plaintext.replace(' ', '')
    encrypted = ''.join(grid[i][j] for i in range (num_rails) for j in range(len(plaintext)) if grid[i][j] != ' ')

    return encrypted

def display(grid):
    for widget in grid_frame.winfo_children():
        widget.destroy()
    

    for r, row in enumerate(grid):
        for c, char in enumerate(row):
            cell = tk.Label(grid_frame, text=char, width=2, height=2, borderwidth=1, relief='solid')
            cell.grid(row=r, column=c, padx=1,pady=1)

    


def reset():
    plaintext = plaintext_entry.get()
    num_rails = int(rail_entry.get())
    if not plaintext or not num_rails:
        return
    if num_rails < 2:
        raise ValueError
    
    grid = generate_rail(plaintext, num_rails)
    encrypted = rail_encrypt(plaintext, num_rails)
    output_var.set(f'Encrypted: {encrypted}')
    display(grid)
  


############################################GUI##############################################
def open_info_window():
    explain_win = tk.Toplevel(root)
    explain_win.title('How it works')
    text = tk.Text(explain_win, wrap='word', width =60, height =30, bg = '#A9B2C3')
    text.pack(padx=10,pady=10)
    explanation = (
        'The Rail Fence cipher (also called railroad cipher) works by:\n'
        'Writing the plaintext in a zigzag (rail fence) pattern across a set number of "rails" (rows).\n'
        'The number of rails is given by the key.\n'
        'Once the zigzag is written, the ciphertext is created by reading the characters row by row.\n'
        '\n'
        'To decrypt:\n'
        'Recreate the zigzag pattern with the same number of rails and length as the ciphertext.\n'
        'Fill in the characters row by row.\n'
        'Then read them in a zigzag to recover the original message.'
    )

    text.insert(tk.END, explanation)
    text.config(state = 'disabled')

root = tk.Tk()
root.title('railroad cipher example')
root.geometry('800x500')
root.resizable(False, False)
root.config(bg = '#A9B2C3')

input_frame = tk.Frame(root, padx=10, pady=10, bg = '#A9B2C3')
input_frame.pack()

tk.Label(input_frame, text = 'text', bg = '#A9B2C3').grid(row = 0, column = 0, padx=5, pady=5)
plaintext_entry = ttk.Entry(input_frame, width =30)
plaintext_entry.grid(row=0, column=1)

tk.Label(input_frame, text = 'rails', bg = '#A9B2C3').grid(row = 1, column = 0, padx=5, pady=5)
rail_entry = ttk.Entry(input_frame, width =30)
rail_entry.grid(row=1, column=1)

tk.Button(input_frame, text = 'start visulisation',command=reset, bg = '#7A89B8').grid(row=2, column= 0, columnspan = 2, pady=10)

output_var = tk.StringVar()
tk.Label(root, bg = '#A9B2C3', textvariable=output_var).pack(pady=5)


grid_frame = tk.Frame(root,bg = '#A9B2C3')
grid_frame.pack(pady=10)

control_frame = tk.Frame(root, padx=10, pady=10, bg = '#7A89B8')
control_frame.pack()


ttk.Button(control_frame, text="Explanation", command=open_info_window).pack(side=tk.LEFT, padx=5)
root.mainloop()